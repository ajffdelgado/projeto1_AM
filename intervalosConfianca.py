# -*- coding: utf-8 -*-
"""
Created on Wed Nov 28 20:49:49 2018

@author: Delgado
"""

import numpy as np                                                         
import scipy as sp                                                         
import scipy.stats                                       

acuracias = [[78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048], [78.0952380952381, 78.0952380952381, 84.76190476190476, 74.76190476190476, 75.71428571428571, 80.47619047619048, 80.95238095238095, 79.52380952380952, 82.38095238095238, 80.47619047619048]]

melhor_indice = None
maior_media = 0
medias = []
for i in range(len(acuracias)):
    media = np.mean(acuracias[i])
    medias.append(media)
    if (media > maior_media):
        maior_media = media
        melhor_indice = i
    
print(len(medias))
media_final = np.mean(medias)
minimo = min(medias)
maximo = max(medias)
conjunto = np.array(medias)                  
print(conjunto)    
                                                       

#calcular a matriz média                                               
media = conjunto.mean(axis=0)                                             
print('media:{}'.format(media))                                            

desvio_padrao = np.std(conjunto)                                          
conf_int = scipy.stats.norm.interval(0.95, loc=media, scale=desvio_padrao) 
print("intervalo de confiança: "+str(conf_int))
print(conf_int)

print("Máximo: "+str(maximo))
print("Mínimo: "+str(minimo))